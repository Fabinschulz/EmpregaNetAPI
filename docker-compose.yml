services:
  postgres:
    image: postgres:15-alpine
    container_name: empreganet_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - empreganet_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s

  redis:
    image: redis:alpine
    container_name: empreganet_redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data
    networks:
      - empreganet_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 20s
      timeout: 5s
      retries: 3

  redisinsight:
    image: redislabs/redisinsight:latest
    container_name: empreganet_redisinsight
    restart: unless-stopped
    ports:
      - "${REDIS_INSIGHT_PORT}:5540"
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - redisinsight_data:/db
    networks:
      - empreganet_network

  bff:
    container_name: empreganet_bff
    build:
      context: .
      dockerfile: Dockerfile
      target: final
    working_dir: /app/bff
    command: ["dotnet", "EmpregaNet.BFF.dll"]
    ports:
      - "${BFF_PORT}:8080"
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
      ConnectionStrings__PostgreSQLConnection: "Host=${POSTGRES_HOST};Port=${POSTGRES_PORT};Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};Pooling=true;Persist Security Info=true;"
      Redis__Connection: "${REDIS_HOST}:${REDIS_PORT}"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - empreganet_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  api:
    container_name: empreganet_api
    build:
      context: .
      dockerfile: Dockerfile
      target: final
    working_dir: /app/api
    command: ["dotnet", "EmpregaNet.Api.dll"]
    ports:
      - "${API_PORT}:8081"
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
      ASPNETCORE_URLS: "http://+:8081" 
      ConnectionStrings__PostgreSQLConnection: "Host=${POSTGRES_HOST};Port=${POSTGRES_PORT};Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};Pooling=true;Persist Security Info=true;"
      Redis__Connection: "${REDIS_HOST}:${REDIS_PORT}"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - empreganet_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8081/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

networks:
  empreganet_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  redisinsight_data:


# .env (Exemplo)
# ----------------
# Ambiente
# ASPNETCORE_ENVIRONMENT=Development

# # PostgreSQL
# POSTGRES_HOST=postgres
# POSTGRES_PORT=5432
# POSTGRES_DB=EmpregaNetDB
# POSTGRES_USER=postgres
# POSTGRES_PASSWORD=postgres

# # Redis
# REDIS_HOST=redis
# REDIS_PORT=6379
# REDIS_INSIGHT_PORT=5540

# # Aplicações
# BFF_PORT=8080
# API_PORT=8081
